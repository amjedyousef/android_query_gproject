/**
	Copyright 2014 [BFR]
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
**/
package org.bfr.querytools.msr.driver;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 4/16/2014 12:56:58 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class AuthHeader implements KvmSerializable
{

	public String username;
	public String passwd;
	public String encodedMustUnderstand;
	public String encodedMustUnderstand12;
	public boolean mustUnderstand;
	public String actor;
	public String role;
	public boolean didUnderstand;
	public String encodedRelay;
	public boolean relay;

	public AuthHeader()
	{
	}

	public AuthHeader(SoapObject soapObject)
	{
		if (soapObject == null)
			return;
		if (soapObject.hasProperty("username"))
		{
			Object obj = soapObject.getProperty("username");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				username = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				username = (String) obj;
			}
		}
		if (soapObject.hasProperty("passwd"))
		{
			Object obj = soapObject.getProperty("passwd");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				passwd = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				passwd = (String) obj;
			}
		}
		if (soapObject.hasProperty("EncodedMustUnderstand"))
		{
			Object obj = soapObject.getProperty("EncodedMustUnderstand");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				encodedMustUnderstand = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				encodedMustUnderstand = (String) obj;
			}
		}
		if (soapObject.hasProperty("EncodedMustUnderstand12"))
		{
			Object obj = soapObject.getProperty("EncodedMustUnderstand12");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				encodedMustUnderstand12 = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				encodedMustUnderstand12 = (String) obj;
			}
		}
		if (soapObject.hasProperty("MustUnderstand"))
		{
			Object obj = soapObject.getProperty("MustUnderstand");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				mustUnderstand = Boolean.parseBoolean(j.toString());
			} else if (obj != null && obj instanceof Boolean)
			{
				mustUnderstand = (Boolean) obj;
			}
		}
		if (soapObject.hasProperty("Actor"))
		{
			Object obj = soapObject.getProperty("Actor");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				actor = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				actor = (String) obj;
			}
		}
		if (soapObject.hasProperty("Role"))
		{
			Object obj = soapObject.getProperty("Role");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				role = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				role = (String) obj;
			}
		}
		if (soapObject.hasProperty("DidUnderstand"))
		{
			Object obj = soapObject.getProperty("DidUnderstand");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				didUnderstand = Boolean.parseBoolean(j.toString());
			} else if (obj != null && obj instanceof Boolean)
			{
				didUnderstand = (Boolean) obj;
			}
		}
		if (soapObject.hasProperty("EncodedRelay"))
		{
			Object obj = soapObject.getProperty("EncodedRelay");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				encodedRelay = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				encodedRelay = (String) obj;
			}
		}
		if (soapObject.hasProperty("Relay"))
		{
			Object obj = soapObject.getProperty("Relay");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				relay = Boolean.parseBoolean(j.toString());
			} else if (obj != null && obj instanceof Boolean)
			{
				relay = (Boolean) obj;
			}
		}
	}

	@Override
	public Object getProperty(int arg0)
	{
		switch (arg0)
		{
		case 0:
			return username;
		case 1:
			return passwd;
		case 2:
			return encodedMustUnderstand;
		case 3:
			return encodedMustUnderstand12;
		case 4:
			return mustUnderstand;
		case 5:
			return actor;
		case 6:
			return role;
		case 7:
			return didUnderstand;
		case 8:
			return encodedRelay;
		case 9:
			return relay;
		}
		return null;
	}

	@Override
	public int getPropertyCount()
	{
		return 10;
	}

	@Override
	public void getPropertyInfo(int index,
			@SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
	{
		switch (index)
		{
		case 0:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "username";
			break;
		case 1:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "passwd";
			break;
		case 2:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "EncodedMustUnderstand";
			break;
		case 3:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "EncodedMustUnderstand12";
			break;
		case 4:
			info.type = PropertyInfo.BOOLEAN_CLASS;
			info.name = "MustUnderstand";
			break;
		case 5:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "Actor";
			break;
		case 6:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "Role";
			break;
		case 7:
			info.type = PropertyInfo.BOOLEAN_CLASS;
			info.name = "DidUnderstand";
			break;
		case 8:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "EncodedRelay";
			break;
		case 9:
			info.type = PropertyInfo.BOOLEAN_CLASS;
			info.name = "Relay";
			break;
		}
	}

	@Override
	public void setProperty(int arg0, Object arg1)
	{
	}

}
