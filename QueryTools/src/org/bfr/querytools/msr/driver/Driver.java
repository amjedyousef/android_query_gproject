/**
	Copyright 2014 [BFR]
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
**/
package org.bfr.querytools.msr.driver;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 4/16/2014 12:56:58 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.List;

import org.bfr.querytools.androidcompat.AsyncTask;
import org.bfr.querytools.logging.Logger;
import org.bfr.querytools.msr.driver.WS_Enums.SoapProtocolVersion;
import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.MarshalFloat;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.kxml2.kdom.Element;
import org.kxml2.kdom.Node;

public class Driver
{

	public String NAMESPACE = "http://tempuri.org/";
	public String url = "http://whitespaces.msresearch.us/WSWeb/driver.asmx";
	public int timeOut = 60000;
	public IWsdl2CodeEvents eventHandler;
	public AuthHeader authHeaderValue;
	public SoapProtocolVersion soapVersion;

	// NB: manually build an authorization header, which wsdl2code didn't implement properly
	// solution from http://stackoverflow.com/questions/5613675/how-to-set-soap-header-using-ksoap2-android
	private Element buildAuthHeader()
	{
		
		Element h = new Element().createElement(NAMESPACE, "AuthHeader");
		Element username = new Element().createElement(NAMESPACE, "username");
		username.addChild(Node.TEXT, authHeaderValue.username);
		h.addChild(Node.ELEMENT, username);
		Element pass = new Element().createElement(NAMESPACE, "passwd"); 
		pass.addChild(Node.TEXT, authHeaderValue.passwd);
		h.addChild(Node.ELEMENT, pass);

		return h;
	}
	
	public Driver()
	{
	}

	public Driver(IWsdl2CodeEvents eventHandler)
	{
		this.eventHandler = eventHandler;
	}

	public Driver(IWsdl2CodeEvents eventHandler, String url)
	{
		this.eventHandler = eventHandler;
		this.url = url;
	}

	public Driver(IWsdl2CodeEvents eventHandler, String url,
			int timeOutInSeconds)
	{
		this.eventHandler = eventHandler;
		this.url = url;
		this.setTimeOut(timeOutInSeconds);
	}

	public void setTimeOut(int seconds)
	{
		this.timeOut = seconds * 1000;
	}

	public void setUrl(String url)
	{
		this.url = url;
	}

	public void ProcessAsync(double latitude, double longitude,
			String propagationModel, double cullingThreshold,
			boolean includeNonLicensed, boolean includeMicrophones,
			boolean useSRTM, boolean useGLOBE, boolean useLRBCast)
			throws Exception
	{
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		ProcessAsync(latitude, longitude, propagationModel, cullingThreshold,
				includeNonLicensed, includeMicrophones, useSRTM, useGLOBE,
				useLRBCast, null);
	}

	public void ProcessAsync(final double latitude, final double longitude,
			final String propagationModel, final double cullingThreshold,
			final boolean includeNonLicensed, final boolean includeMicrophones,
			final boolean useSRTM, final boolean useGLOBE,
			final boolean useLRBCast, final List<HeaderProperty> headers)
			throws Exception
	{

		new AsyncTask<Void, Void, VectorFlatIncumbentType>()
		{
			@Override
			protected void onPreExecute()
			{
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected VectorFlatIncumbentType doInBackground(Void... params)
			{
				return Process(latitude, longitude, propagationModel,
						cullingThreshold, includeNonLicensed,
						includeMicrophones, useSRTM, useGLOBE, useLRBCast,
						headers);
			}

			@Override
			protected void onPostExecute(VectorFlatIncumbentType result)
			{
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null)
				{
					eventHandler.Wsdl2CodeFinished("Process", result);
				}
			}
		}.execute();
	}

	public VectorFlatIncumbentType Process(double latitude, double longitude,
			String propagationModel, double cullingThreshold,
			boolean includeNonLicensed, boolean includeMicrophones,
			boolean useSRTM, boolean useGLOBE, boolean useLRBCast)
	{
		return Process(latitude, longitude, propagationModel, cullingThreshold,
				includeNonLicensed, includeMicrophones, useSRTM, useGLOBE,
				useLRBCast, null);
	}

	public VectorFlatIncumbentType Process(double latitude, double longitude,
			String propagationModel, double cullingThreshold,
			boolean includeNonLicensed, boolean includeMicrophones,
			boolean useSRTM, boolean useGLOBE, boolean useLRBCast,
			List<HeaderProperty> headers)
	{
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://tempuri.org/", "Process");
		MarshalFloat marshalFloat = new MarshalFloat();
		marshalFloat.register(soapEnvelope);
		soapReq.addProperty("Latitude", latitude);
		soapReq.addProperty("Longitude", longitude);
		soapReq.addProperty("PropagationModel", propagationModel);
		soapReq.addProperty("CullingThreshold", cullingThreshold);
		soapReq.addProperty("IncludeNonLicensed", includeNonLicensed);
		soapReq.addProperty("IncludeMicrophones", includeMicrophones);
		soapReq.addProperty("UseSRTM", useSRTM);
		soapReq.addProperty("UseGLOBE", useGLOBE);
		soapReq.addProperty("UseLRBCast", useLRBCast);
		soapEnvelope.setOutputSoapObject(soapReq);

		// NB: manually set auth header
//		soapEnvelope.headerOut = new Element[1];
//		soapEnvelope.headerOut[0] = buildAuthHeader();
		
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		try
		{
			if (headers != null)
			{
				httpTransport.call("http://tempuri.org/Process", soapEnvelope,
						headers);
			} else
			{
				httpTransport.call("http://tempuri.org/Process", soapEnvelope);
			}
			Object retObj = soapEnvelope.bodyIn;
			if (retObj instanceof SoapFault)
			{
				SoapFault fault = (SoapFault) retObj;
				Exception ex = new Exception(fault.faultstring);
				if (eventHandler != null)
					eventHandler.Wsdl2CodeFinishedWithException(ex);
			} else
			{
				SoapObject result = (SoapObject) retObj;
				if (result.getPropertyCount() > 0)
				{
					Object obj = result.getProperty(0);
					SoapObject j = (SoapObject) obj;
					VectorFlatIncumbentType resultVariable = new VectorFlatIncumbentType(
							j);
					return resultVariable;
				}
			}
		} catch (Exception e)
		{
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
		return null;
	}

	public void GetSpectrumMapAsync(double latitude, double longitude,
			String propagationModel, double cullingThreshold,
			boolean includeNonLicensed, boolean includeMicrophones,
			boolean useSRTM, boolean useGLOBE, boolean useLRBCast)
			throws Exception
	{
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		GetSpectrumMapAsync(latitude, longitude, propagationModel,
				cullingThreshold, includeNonLicensed, includeMicrophones,
				useSRTM, useGLOBE, useLRBCast, null);
	}

	public void GetSpectrumMapAsync(final double latitude,
			final double longitude, final String propagationModel,
			final double cullingThreshold, final boolean includeNonLicensed,
			final boolean includeMicrophones, final boolean useSRTM,
			final boolean useGLOBE, final boolean useLRBCast,
			final List<HeaderProperty> headers) throws Exception
	{

		new AsyncTask<Void, Void, VectorBoolean>()
		{
			@Override
			protected void onPreExecute()
			{
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected VectorBoolean doInBackground(Void... params)
			{
				return GetSpectrumMap(latitude, longitude, propagationModel,
						cullingThreshold, includeNonLicensed,
						includeMicrophones, useSRTM, useGLOBE, useLRBCast,
						headers);
			}

			@Override
			protected void onPostExecute(VectorBoolean result)
			{
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null)
				{
					eventHandler.Wsdl2CodeFinished("GetSpectrumMap", result);
				}
			}
		}.execute();
	}

	public VectorBoolean GetSpectrumMap(double latitude, double longitude,
			String propagationModel, double cullingThreshold,
			boolean includeNonLicensed, boolean includeMicrophones,
			boolean useSRTM, boolean useGLOBE, boolean useLRBCast)
	{
		return GetSpectrumMap(latitude, longitude, propagationModel,
				cullingThreshold, includeNonLicensed, includeMicrophones,
				useSRTM, useGLOBE, useLRBCast, null);
	}

	public VectorBoolean GetSpectrumMap(double latitude, double longitude,
			String propagationModel, double cullingThreshold,
			boolean includeNonLicensed, boolean includeMicrophones,
			boolean useSRTM, boolean useGLOBE, boolean useLRBCast,
			List<HeaderProperty> headers)
	{
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetSpectrumMap");
		MarshalFloat marshalFloat = new MarshalFloat();
		marshalFloat.register(soapEnvelope);
		soapReq.addProperty("Latitude", latitude);
		soapReq.addProperty("Longitude", longitude);
		soapReq.addProperty("PropagationModel", propagationModel);
		soapReq.addProperty("CullingThreshold", cullingThreshold);
		soapReq.addProperty("IncludeNonLicensed", includeNonLicensed);
		soapReq.addProperty("IncludeMicrophones", includeMicrophones);
		soapReq.addProperty("UseSRTM", useSRTM);
		soapReq.addProperty("UseGLOBE", useGLOBE);
		soapReq.addProperty("UseLRBCast", useLRBCast);
		soapEnvelope.setOutputSoapObject(soapReq);
		
		// NB: manually set auth header
		soapEnvelope.headerOut = new Element[1];
		soapEnvelope.headerOut[0] = buildAuthHeader();
		
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		
		httpTransport.debug = true;
		
		try
		{
			if (headers != null)
			{
				httpTransport.call("http://tempuri.org/GetSpectrumMap", soapEnvelope, headers);
			} else
			{
				httpTransport.call("http://tempuri.org/GetSpectrumMap", soapEnvelope);
			}
			Object retObj = soapEnvelope.bodyIn;
			if (retObj instanceof SoapFault)
			{
				SoapFault fault = (SoapFault) retObj;
				Exception ex = new Exception(fault.faultstring);
				if (eventHandler != null)
					eventHandler.Wsdl2CodeFinishedWithException(ex);
			} else
			{
				SoapObject result = (SoapObject) retObj;
				if (result.getPropertyCount() > 0)
				{
					Object obj = result.getProperty(0);
					SoapObject j = (SoapObject) obj;
					VectorBoolean resultVariable = new VectorBoolean(j);
					return resultVariable;
				}
			}
		} catch (Exception e)
		{
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
		
		Logger.log(httpTransport.requestDump);
		
		return null;
	}

	public void AllIncumbentsAsync() throws Exception
	{
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		AllIncumbentsAsync(null);
	}

	public void AllIncumbentsAsync(final List<HeaderProperty> headers)
			throws Exception
	{

		new AsyncTask<Void, Void, VectorFlatIncumbentType>()
		{
			@Override
			protected void onPreExecute()
			{
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected VectorFlatIncumbentType doInBackground(Void... params)
			{
				return AllIncumbents(headers);
			}

			@Override
			protected void onPostExecute(VectorFlatIncumbentType result)
			{
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null)
				{
					eventHandler.Wsdl2CodeFinished("AllIncumbents", result);
				}
			}
		}.execute();
	}

	public VectorFlatIncumbentType AllIncumbents()
	{
		return AllIncumbents(null);
	}

	public VectorFlatIncumbentType AllIncumbents(List<HeaderProperty> headers)
	{
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://tempuri.org/",
				"AllIncumbents");
		soapEnvelope.setOutputSoapObject(soapReq);
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		try
		{
			if (headers != null)
			{
				httpTransport.call("http://tempuri.org/AllIncumbents",
						soapEnvelope, headers);
			} else
			{
				httpTransport.call("http://tempuri.org/AllIncumbents",
						soapEnvelope);
			}
			Object retObj = soapEnvelope.bodyIn;
			if (retObj instanceof SoapFault)
			{
				SoapFault fault = (SoapFault) retObj;
				Exception ex = new Exception(fault.faultstring);
				if (eventHandler != null)
					eventHandler.Wsdl2CodeFinishedWithException(ex);
			} else
			{
				SoapObject result = (SoapObject) retObj;
				if (result.getPropertyCount() > 0)
				{
					Object obj = result.getProperty(0);
					SoapObject j = (SoapObject) obj;
					VectorFlatIncumbentType resultVariable = new VectorFlatIncumbentType(
							j);
					return resultVariable;
				}
			}
		} catch (Exception e)
		{
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
		return null;
	}

	public void WSAnalyzeAsync(VectorFlatIncumbentType incumbents)
			throws Exception
	{
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		WSAnalyzeAsync(incumbents, null);
	}

	public void WSAnalyzeAsync(final VectorFlatIncumbentType incumbents,
			final List<HeaderProperty> headers) throws Exception
	{

		new AsyncTask<Void, Void, AnalysisResult>()
		{
			@Override
			protected void onPreExecute()
			{
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected AnalysisResult doInBackground(Void... params)
			{
				return WSAnalyze(incumbents, headers);
			}

			@Override
			protected void onPostExecute(AnalysisResult result)
			{
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null)
				{
					eventHandler.Wsdl2CodeFinished("WSAnalyze", result);
				}
			}
		}.execute();
	}

	public AnalysisResult WSAnalyze(VectorFlatIncumbentType incumbents)
	{
		return WSAnalyze(incumbents, null);
	}

	public AnalysisResult WSAnalyze(VectorFlatIncumbentType incumbents,
			List<HeaderProperty> headers)
	{
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://tempuri.org/", "WSAnalyze");
		soapReq.addProperty("Incumbents", incumbents);
		soapEnvelope.setOutputSoapObject(soapReq);
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		try
		{
			if (headers != null)
			{
				httpTransport.call("http://tempuri.org/WSAnalyze",
						soapEnvelope, headers);
			} else
			{
				httpTransport
						.call("http://tempuri.org/WSAnalyze", soapEnvelope);
			}
			Object retObj = soapEnvelope.bodyIn;
			if (retObj instanceof SoapFault)
			{
				SoapFault fault = (SoapFault) retObj;
				Exception ex = new Exception(fault.faultstring);
				if (eventHandler != null)
					eventHandler.Wsdl2CodeFinishedWithException(ex);
			} else
			{
				SoapObject result = (SoapObject) retObj;
				if (result.getPropertyCount() > 0)
				{
					Object obj = result.getProperty(0);
					SoapObject j = (SoapObject) obj;
					AnalysisResult resultVariable = new AnalysisResult(j);
					return resultVariable;

				}
			}
		} catch (Exception e)
		{
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
		return null;
	}

	public void ProcessTransmitterAsync(String propagationModel,
			FlatIncumbentType transmitter, double threshold, boolean useSRTM,
			boolean useGLOBE, boolean useLRBCast) throws Exception
	{
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		ProcessTransmitterAsync(propagationModel, transmitter, threshold,
				useSRTM, useGLOBE, useLRBCast, null);
	}

	public void ProcessTransmitterAsync(final String propagationModel,
			final FlatIncumbentType transmitter, final double threshold,
			final boolean useSRTM, final boolean useGLOBE,
			final boolean useLRBCast, final List<HeaderProperty> headers)
			throws Exception
	{

		new AsyncTask<Void, Void, FlatIncumbentType>()
		{
			@Override
			protected void onPreExecute()
			{
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected FlatIncumbentType doInBackground(Void... params)
			{
				return ProcessTransmitter(propagationModel, transmitter,
						threshold, useSRTM, useGLOBE, useLRBCast, headers);
			}

			@Override
			protected void onPostExecute(FlatIncumbentType result)
			{
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null)
				{
					eventHandler
							.Wsdl2CodeFinished("ProcessTransmitter", result);
				}
			}
		}.execute();
	}

	public FlatIncumbentType ProcessTransmitter(String propagationModel,
			FlatIncumbentType transmitter, double threshold, boolean useSRTM,
			boolean useGLOBE, boolean useLRBCast)
	{
		return ProcessTransmitter(propagationModel, transmitter, threshold,
				useSRTM, useGLOBE, useLRBCast, null);
	}

	public FlatIncumbentType ProcessTransmitter(String propagationModel,
			FlatIncumbentType transmitter, double threshold, boolean useSRTM,
			boolean useGLOBE, boolean useLRBCast, List<HeaderProperty> headers)
	{
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://tempuri.org/",
				"ProcessTransmitter");
		soapEnvelope.addMapping("http://tempuri.org/", "Transmitter",
				new FlatIncumbentType().getClass());
		MarshalFloat marshalFloat = new MarshalFloat();
		marshalFloat.register(soapEnvelope);
		soapReq.addProperty("PropagationModel", propagationModel);
		soapReq.addProperty("Transmitter", transmitter);
		soapReq.addProperty("Threshold", threshold);
		soapReq.addProperty("UseSRTM", useSRTM);
		soapReq.addProperty("UseGLOBE", useGLOBE);
		soapReq.addProperty("UseLRBCast", useLRBCast);
		soapEnvelope.setOutputSoapObject(soapReq);
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		try
		{
			if (headers != null)
			{
				httpTransport.call("http://tempuri.org/ProcessTransmitter",
						soapEnvelope, headers);
			} else
			{
				httpTransport.call("http://tempuri.org/ProcessTransmitter",
						soapEnvelope);
			}
			Object retObj = soapEnvelope.bodyIn;
			if (retObj instanceof SoapFault)
			{
				SoapFault fault = (SoapFault) retObj;
				Exception ex = new Exception(fault.faultstring);
				if (eventHandler != null)
					eventHandler.Wsdl2CodeFinishedWithException(ex);
			} else
			{
				SoapObject result = (SoapObject) retObj;
				if (result.getPropertyCount() > 0)
				{
					Object obj = result.getProperty(0);
					SoapObject j = (SoapObject) obj;
					FlatIncumbentType resultVariable = new FlatIncumbentType(j);
					return resultVariable;

				}
			}
		} catch (Exception e)
		{
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
		return null;
	}

	public void UpdateDBAsync(int deviceID, double latitude, double longitude,
			VectorBoolean channelMap) throws Exception
	{
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		UpdateDBAsync(deviceID, latitude, longitude, channelMap, null);
	}

	public void UpdateDBAsync(final int deviceID, final double latitude,
			final double longitude, final VectorBoolean channelMap,
			final List<HeaderProperty> headers) throws Exception
	{

		new AsyncTask<Void, Void, Void>()
		{
			@Override
			protected void onPreExecute()
			{
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected Void doInBackground(Void... params)
			{
				UpdateDB(deviceID, latitude, longitude, channelMap, headers);
				return null;
			}

			@Override
			protected void onPostExecute(Void result)
			{
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null)
				{
					eventHandler.Wsdl2CodeFinished("UpdateDB", result);
				}
			}
		}.execute();
	}

	public void UpdateDB(int deviceID, double latitude, double longitude,
			VectorBoolean channelMap)
	{
		UpdateDB(deviceID, latitude, longitude, channelMap, null);
	}

	public void UpdateDB(int deviceID, double latitude, double longitude,
			VectorBoolean channelMap, List<HeaderProperty> headers)
	{
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://tempuri.org/", "UpdateDB");
		MarshalFloat marshalFloat = new MarshalFloat();
		marshalFloat.register(soapEnvelope);
		soapReq.addProperty("DeviceID", deviceID);
		soapReq.addProperty("Latitude", latitude);
		soapReq.addProperty("Longitude", longitude);
		soapReq.addProperty("ChannelMap", channelMap);
		soapEnvelope.setOutputSoapObject(soapReq);
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		try
		{
			if (headers != null)
			{
				httpTransport.call("http://tempuri.org/UpdateDB", soapEnvelope,
						headers);
			} else
			{
				httpTransport.call("http://tempuri.org/UpdateDB", soapEnvelope);
			}
		} catch (Exception e)
		{
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
	}

	public void GetBuildNumberAsync() throws Exception
	{
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		GetBuildNumberAsync(null);
	}

	public void GetBuildNumberAsync(final List<HeaderProperty> headers)
			throws Exception
	{

		new AsyncTask<Void, Void, String>()
		{
			@Override
			protected void onPreExecute()
			{
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected String doInBackground(Void... params)
			{
				return GetBuildNumber(headers);
			}

			@Override
			protected void onPostExecute(String result)
			{
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null)
				{
					eventHandler.Wsdl2CodeFinished("GetBuildNumber", result);
				}
			}
		}.execute();
	}

	public String GetBuildNumber()
	{
		return GetBuildNumber(null);
	}

	public String GetBuildNumber(List<HeaderProperty> headers)
	{
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://tempuri.org/",
				"GetBuildNumber");
		soapEnvelope.setOutputSoapObject(soapReq);
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		try
		{
			if (headers != null)
			{
				httpTransport.call("http://tempuri.org/GetBuildNumber",
						soapEnvelope, headers);
			} else
			{
				httpTransport.call("http://tempuri.org/GetBuildNumber",
						soapEnvelope);
			}
			Object retObj = soapEnvelope.bodyIn;
			if (retObj instanceof SoapFault)
			{
				SoapFault fault = (SoapFault) retObj;
				Exception ex = new Exception(fault.faultstring);
				if (eventHandler != null)
					eventHandler.Wsdl2CodeFinishedWithException(ex);
			} else
			{
				SoapObject result = (SoapObject) retObj;
				if (result.getPropertyCount() > 0)
				{
					Object obj = result.getProperty(0);
					if (obj != null
							&& obj.getClass().equals(SoapPrimitive.class))
					{
						SoapPrimitive j = (SoapPrimitive) obj;
						String resultVariable = j.toString();
						return resultVariable;
					} else if (obj != null && obj instanceof String)
					{
						String resultVariable = (String) obj;
						return resultVariable;
					}
				}
			}
		} catch (Exception e)
		{
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
		return "";
	}

}
