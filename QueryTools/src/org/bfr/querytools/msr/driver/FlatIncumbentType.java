/**
	Copyright 2014 [BFR]
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
**/
package org.bfr.querytools.msr.driver;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 4/16/2014 12:56:58 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.Hashtable;

import org.bfr.querytools.msr.driver.WS_Enums.IncumbentType;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class FlatIncumbentType implements KvmSerializable
{

	public IncumbentType type;
	public int channel;
	public double height;
	public double txPower;
	public double thresholdDistance;
	public double latitude;
	public double longitude;
	public int population;
	public int area;
	public String status;
	public int antennaID;
	public String antennaMake;
	public String callSign;
	public double rSSI;
	public int antennaRotation;
	public String state;
	public double mechanicalTilt;
	public String elevationDataSource;
	public String propagationMode;
	public String comments;
	public VectorLocation areaPoints;

	public FlatIncumbentType()
	{
	}

	public FlatIncumbentType(SoapObject soapObject)
	{
		if (soapObject == null)
			return;
		if (soapObject.hasProperty("Type"))
		{
			Object obj = soapObject.getProperty("Type");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				type = IncumbentType.fromString(j.toString());
			}
		}
		if (soapObject.hasProperty("Channel"))
		{
			Object obj = soapObject.getProperty("Channel");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				channel = Integer.parseInt(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				channel = (Integer) obj;
			}
		}
		if (soapObject.hasProperty("Height"))
		{
			Object obj = soapObject.getProperty("Height");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				height = Double.parseDouble(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				height = (Double) obj;
			}
		}
		if (soapObject.hasProperty("TxPower"))
		{
			Object obj = soapObject.getProperty("TxPower");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				txPower = Double.parseDouble(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				txPower = (Double) obj;
			}
		}
		if (soapObject.hasProperty("ThresholdDistance"))
		{
			Object obj = soapObject.getProperty("ThresholdDistance");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				thresholdDistance = Double.parseDouble(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				thresholdDistance = (Double) obj;
			}
		}
		if (soapObject.hasProperty("Latitude"))
		{
			Object obj = soapObject.getProperty("Latitude");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				latitude = Double.parseDouble(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				latitude = (Double) obj;
			}
		}
		if (soapObject.hasProperty("Longitude"))
		{
			Object obj = soapObject.getProperty("Longitude");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				longitude = Double.parseDouble(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				longitude = (Double) obj;
			}
		}
		if (soapObject.hasProperty("Population"))
		{
			Object obj = soapObject.getProperty("Population");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				population = Integer.parseInt(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				population = (Integer) obj;
			}
		}
		if (soapObject.hasProperty("Area"))
		{
			Object obj = soapObject.getProperty("Area");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				area = Integer.parseInt(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				area = (Integer) obj;
			}
		}
		if (soapObject.hasProperty("Status"))
		{
			Object obj = soapObject.getProperty("Status");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				status = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				status = (String) obj;
			}
		}
		if (soapObject.hasProperty("AntennaID"))
		{
			Object obj = soapObject.getProperty("AntennaID");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				antennaID = Integer.parseInt(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				antennaID = (Integer) obj;
			}
		}
		if (soapObject.hasProperty("AntennaMake"))
		{
			Object obj = soapObject.getProperty("AntennaMake");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				antennaMake = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				antennaMake = (String) obj;
			}
		}
		if (soapObject.hasProperty("CallSign"))
		{
			Object obj = soapObject.getProperty("CallSign");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				callSign = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				callSign = (String) obj;
			}
		}
		if (soapObject.hasProperty("RSSI"))
		{
			Object obj = soapObject.getProperty("RSSI");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				rSSI = Double.parseDouble(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				rSSI = (Double) obj;
			}
		}
		if (soapObject.hasProperty("AntennaRotation"))
		{
			Object obj = soapObject.getProperty("AntennaRotation");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				antennaRotation = Integer.parseInt(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				antennaRotation = (Integer) obj;
			}
		}
		if (soapObject.hasProperty("State"))
		{
			Object obj = soapObject.getProperty("State");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				state = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				state = (String) obj;
			}
		}
		if (soapObject.hasProperty("MechanicalTilt"))
		{
			Object obj = soapObject.getProperty("MechanicalTilt");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				mechanicalTilt = Double.parseDouble(j.toString());
			} else if (obj != null && obj instanceof Number)
			{
				mechanicalTilt = (Double) obj;
			}
		}
		if (soapObject.hasProperty("ElevationDataSource"))
		{
			Object obj = soapObject.getProperty("ElevationDataSource");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				elevationDataSource = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				elevationDataSource = (String) obj;
			}
		}
		if (soapObject.hasProperty("PropagationMode"))
		{
			Object obj = soapObject.getProperty("PropagationMode");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				propagationMode = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				propagationMode = (String) obj;
			}
		}
		if (soapObject.hasProperty("Comments"))
		{
			Object obj = soapObject.getProperty("Comments");
			if (obj != null && obj.getClass().equals(SoapPrimitive.class))
			{
				SoapPrimitive j = (SoapPrimitive) obj;
				comments = j.toString();
			} else if (obj != null && obj instanceof String)
			{
				comments = (String) obj;
			}
		}
		if (soapObject.hasProperty("AreaPoints"))
		{
			SoapObject j = (SoapObject) soapObject.getProperty("AreaPoints");
			areaPoints = new VectorLocation(j);
		}
	}

	@Override
	public Object getProperty(int arg0)
	{
		switch (arg0)
		{
		case 0:
			return type.toString();
		case 1:
			return channel;
		case 2:
			return height;
		case 3:
			return txPower;
		case 4:
			return thresholdDistance;
		case 5:
			return latitude;
		case 6:
			return longitude;
		case 7:
			return population;
		case 8:
			return area;
		case 9:
			return status;
		case 10:
			return antennaID;
		case 11:
			return antennaMake;
		case 12:
			return callSign;
		case 13:
			return rSSI;
		case 14:
			return antennaRotation;
		case 15:
			return state;
		case 16:
			return mechanicalTilt;
		case 17:
			return elevationDataSource;
		case 18:
			return propagationMode;
		case 19:
			return comments;
		case 20:
			return areaPoints;
		}
		return null;
	}

	@Override
	public int getPropertyCount()
	{
		return 21;
	}

	@Override
	public void getPropertyInfo(int index,
			@SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
	{
		switch (index)
		{
		case 0:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "Type";
			break;
		case 1:
			info.type = PropertyInfo.INTEGER_CLASS;
			info.name = "Channel";
			break;
		case 2:
			info.type = Double.class;
			info.name = "Height";
			break;
		case 3:
			info.type = Double.class;
			info.name = "TxPower";
			break;
		case 4:
			info.type = Double.class;
			info.name = "ThresholdDistance";
			break;
		case 5:
			info.type = Double.class;
			info.name = "Latitude";
			break;
		case 6:
			info.type = Double.class;
			info.name = "Longitude";
			break;
		case 7:
			info.type = PropertyInfo.INTEGER_CLASS;
			info.name = "Population";
			break;
		case 8:
			info.type = PropertyInfo.INTEGER_CLASS;
			info.name = "Area";
			break;
		case 9:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "Status";
			break;
		case 10:
			info.type = PropertyInfo.INTEGER_CLASS;
			info.name = "AntennaID";
			break;
		case 11:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "AntennaMake";
			break;
		case 12:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "CallSign";
			break;
		case 13:
			info.type = Double.class;
			info.name = "RSSI";
			break;
		case 14:
			info.type = PropertyInfo.INTEGER_CLASS;
			info.name = "AntennaRotation";
			break;
		case 15:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "State";
			break;
		case 16:
			info.type = Double.class;
			info.name = "MechanicalTilt";
			break;
		case 17:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "ElevationDataSource";
			break;
		case 18:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "PropagationMode";
			break;
		case 19:
			info.type = PropertyInfo.STRING_CLASS;
			info.name = "Comments";
			break;
		case 20:
			info.type = PropertyInfo.VECTOR_CLASS;
			info.name = "AreaPoints";
			break;
		}
	}

	@Override
	public void setProperty(int arg0, Object arg1)
	{
	}

}
